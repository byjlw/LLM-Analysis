```javascript
// Import required libraries
const tf = require('@tensorflow/tfjs');
const BrainJS = require('brain.js');
const express = require('express');
const mongoose = require('mongoose');

// Choose an NLP Library: TensorFlow.js
const nlpLibrary = tf;

// Prepare the Dataset: Customer interactions and responses
const dataset = [
  {
    input: 'Hello, how can I help you?',
    output: 'Hi, I need help with my account.'
  },
  {
    input: 'What is your account number?',
    output: 'My account number is 12345.'
  },
  //...
];

// Train the Model: Intent detection and response generation
const model = tf.sequential();
model.add(tf.layers.dense({ units: 10, activation: 'relu', inputShape: [1] }));
model.add(tf.layers.dense({ units: 10, activation: 'softmax' }));
model.compile({ optimizer: tf.optimizers.adam(), loss: 'categoricalCrossentropy', metrics: ['accuracy'] });

// Prepare training data
const inputs = dataset.map(item => item.input);
const outputs = dataset.map(item => item.output);

// Convert data to tensors
const inputTensors = tf.tensor2d(inputs, [inputs.length, 1]);
const outputTensors = tf.tensor2d(outputs, [outputs.length, 1]);

// Train the model
model.fit(inputTensors, outputTensors, { epochs: 100 });

// Create the Inference Module: Load and run the trained ML model
const inferenceModule = (input) => {
  const inputTensor = tf.tensor2d([input], [1, 1]);
  const output = model.predict(inputTensor);
  return output.dataSync()[0];
};

// Integrate with Node.js Backend: Express.js and MongoDB
const app = express();
mongoose.connect('mongodb://localhost/chatbot', { useNewUrlParser: true, useUnifiedTopology: true });

// Define schema for chatbot interactions and customer data
const interactionSchema = new mongoose.Schema({
  input: String,
  output: String
});
const customerSchema = new mongoose.Schema({
  name: String,
  accountNumber: String
});

// Create models for interactions and customers
const Interaction = mongoose.model('Interaction', interactionSchema);
const Customer = mongoose.model('Customer', customerSchema);

// API endpoint for chatbot interactions
app.post('/interact', (req, res) => {
  const input = req.body.input;
  const output = inferenceModule(input);
  const interaction = new Interaction({ input, output });
  interaction.save((err) => {
    if (err) {
      console.error(err);
    } else {
      res.send({ output });
    }
  });
});

// API endpoint for customer data
app.post('/customer', (req, res) => {
  const customer = new Customer(req.body);
  customer.save((err) => {
    if (err) {
      console.error(err);
    } else {
      res.send({ message: 'Customer data saved successfully' });
    }
  });
});

// Test and Evaluate: Metrics such as accuracy, precision, and recall
const testDataset = [
  {
    input: 'Hello, how can I help you?',
    output: 'Hi, I need help with my account.'
  },
  //...
];

let correct = 0;
testDataset.forEach((item) => {
  const output = inferenceModule(item.input);
  if (output === item.output) {
    correct++;
  }
});

const accuracy = correct / testDataset.length;
console.log(`Accuracy: ${accuracy}`);

app.listen(3000, () => {
  console.log('Server listening on port 3000');
});
```