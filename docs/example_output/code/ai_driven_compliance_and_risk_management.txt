```java
// ComplianceRiskManagement.java
import org.deeplearning4j.nn.api.OptimizationAlgorithm;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.deeplearning4j.optimize.api.BaseTrainingListener;
import org.deeplearning4j.optimize.listeners.ScoreIterationListener;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Sgd;
import org.nd4j.linalg.lossfunctions.LossFunctions;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ComplianceRiskManagement {

    private MultiLayerNetwork model;

    public ComplianceRiskManagement() {
        this.model = initModel();
    }

    private MultiLayerNetwork initModel() {
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
               .seed(42)
               .weightInit(WeightInit.XAVIER)
               .updater(new Sgd(0.1))
               .list()
               .layer(0, new DenseLayer.Builder()
                       .nIn(10) // input layer
                       .nOut(20)
                       .activation(Activation.RELU)
                       .build())
               .layer(1, new OutputLayer.Builder()
                       .lossFunction(LossFunctions.LossFunction.MSE)
                       .nIn(20)
                       .nOut(1)
                       .activation(Activation.IDENTITY)
                       .build())
               .pretrain(false).backprop(true)
               .build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();
        model.setListeners(new ScoreIterationListener(10));
        return model;
    }

    public void trainModel(List<INDArray> trainingData, List<INDArray> labels) {
        for (int i = 0; i < trainingData.size(); i++) {
            model.fit(trainingData.get(i), labels.get(i));
        }
    }

    public INDArray predict(INDArray inputData) {
        return model.output(inputData);
    }

    public static void main(String[] args) throws IOException {
        ComplianceRiskManagement crm = new ComplianceRiskManagement();
        List<INDArray> trainingData = new ArrayList<>();
        List<INDArray> labels = new ArrayList<>();

        // Load training data
        try (BufferedReader br = new BufferedReader(new FileReader("training_data.csv"))) {
            String line;
            while ((line = br.readLine())!= null) {
                String[] values = line.split(",");
                INDArray data = Nd4j.create(new double[]{Double.parseDouble(values[0]), Double.parseDouble(values[1]), Double.parseDouble(values[2])});
                INDArray label = Nd4j.create(new double[]{Double.parseDouble(values[3])});
                trainingData.add(data);
                labels.add(label);
            }
        }

        crm.trainModel(trainingData, labels);

        // Test the model
        INDArray testData = Nd4j.create(new double[]{1.0, 2.0, 3.0});
        INDArray predictedRisk = crm.predict(testData);
        System.out.println("Predicted risk: " + predictedRisk);
    }
}
```

```java
// DataPreprocessor.java
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.factory.Nd4j;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class DataPreprocessor {

    public List<INDArray> preprocessData(String filePath) throws IOException {
        List<INDArray> preprocessedData = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine())!= null) {
                String[] values = line.split(",");
                INDArray data = Nd4j.create(new double[]{Double.parseDouble(values[0]), Double.parseDouble(values[1]), Double.parseDouble(values[2])});
                // Apply feature scaling (e.g. normalization)
                data = data.div(10.0);
                preprocessedData.add(data);
            }
        }
        return preprocessedData;
    }

    public static void main(String[] args) throws IOException {
        DataPreprocessor dp = new DataPreprocessor();
        List<INDArray> preprocessedData = dp.preprocessData("training_data.csv");
        for (INDArray data : preprocessedData) {
            System.out.println(data);
        }
    }
}
```

```java
// RiskScorer.java
import org.nd4j.linalg.api.ndarray.INDArray;

public class RiskScorer {

    public double calculateRiskScore(INDArray predictedRisk) {
        // Apply risk scoring logic (e.g. threshold-based)
        if (predictedRisk.getDouble(0) > 0.5) {
            return 1.0; // High risk
        } else {
            return 0.0; // Low risk
        }
    }

    public static void main(String[] args) {
        RiskScorer rs = new RiskScorer();
        INDArray predictedRisk = Nd4j.create(new double[]{0.6});
        double riskScore = rs.calculateRiskScore(predictedRisk);
        System.out.println("Risk score: " + riskScore);
    }
}
```

```java
// ComplianceRiskManagementTest.java
import org.junit.Test;
import org.nd4j.linalg.api.ndarray.INDArray;

import static org.junit.Assert.assertEquals;

public class ComplianceRiskManagementTest {

    @Test
    public void testPredict() {
        ComplianceRiskManagement crm = new ComplianceRiskManagement();
        INDArray inputData = Nd4j.create(new double[]{1.0, 2.0, 3.0});
        INDArray predictedRisk = crm.predict(inputData);
        assertEquals(1, predictedRisk.size());
    }

    @Test
    public void testTrainModel() {
        ComplianceRiskManagement crm = new ComplianceRiskManagement();
        List<INDArray> trainingData = new ArrayList<>();
        List<INDArray> labels = new ArrayList<>();
        trainingData.add(Nd4j.create(new double[]{1.0, 2.0, 3.0}));
        labels.add(Nd4j.create(new double[]{0.5}));
        crm.trainModel(trainingData, labels);
    }
}
```