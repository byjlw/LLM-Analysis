```python
# requirements.txt
Django==4.1.7
psycopg2==2.9.5
scikit-learn==1.2.0
numpy==1.23.4
pandas==1.5.2
tensorflow==2.11.0
```

```python
# settings.py
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'your_secret_key'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'inventory',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_database_username',
        'PASSWORD': 'your_database_password',
        'HOST': 'your_host',
        'PORT': '5432',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'
```

```python
# models.py
from django.db import models

class Inventory(models.Model):
    date = models.DateField()
    season = models.CharField(max_length=10)
    product_category = models.CharField(max_length=20)
    supplier_lead_time = models.IntegerField()
    demand_quantity = models.IntegerField()
```

```python
# views.py
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import pandas as pd
import numpy as np
from .models import Inventory

@require_http_methods(["POST"])
def train_model(request):
    data = pd.read_csv('data.csv')
    X = data[['date', 'season', 'product_category', 'supplier_lead_time']]
    y = data['demand_quantity']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    return JsonResponse({'mae': mae, 'mse': mse, 'r2': r2})

@require_http_methods(["POST"])
def predict(request):
    data = request.POST
    date = data['date']
    season = data['season']
    product_category = data['product_category']
    supplier_lead_time = data['supplier_lead_time']
    model = RandomForestRegressor()
    model.fit(pd.read_csv('data.csv')[['date', 'season', 'product_category', 'supplier_lead_time']], pd.read_csv('data.csv')['demand_quantity'])
    prediction = model.predict([[date, season, product_category, supplier_lead_time]])
    return JsonResponse({'prediction': prediction[0]})
```

```python
# tests.py
from django.test import TestCase
from .views import train_model, predict
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

class TestTrainModel(TestCase):
    def test_train_model(self):
        data = pd.read_csv('data.csv')
        X = data[['date', 'season', 'product_category', 'supplier_lead_time']]
        y = data['demand_quantity']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = RandomForestRegressor()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        mae = mean_absolute_error(y_test, y_pred)
        mse = mean_squared_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)
        self.assertLess(mae, 10)
        self.assertLess(mse, 100)
        self.assertGreater(r2, 0.5)

class TestPredict(TestCase):
    def test_predict(self):
        data = {'date': '2022-01-01', 'season': 'winter', 'product_category': 'electronic', 'supplier_lead_time': 10}
        model = RandomForestRegressor()
        model.fit(pd.read_csv('data.csv')[['date', 'season', 'product_category', 'supplier_lead_time']], pd.read_csv('data.csv')['demand_quantity'])
        prediction = model.predict([[data['date'], data['season'], data['product_category'], data['supplier_lead_time']]])
        self.assertGreater(prediction[0], 0)
```

```python
# angular component
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  template: `
    <div>
      <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <label>Date:</label>
        <input formControlName="date" type="date">
        <br>
        <label>Season:</label>
        <input formControlName="season" type="text">
        <br>
        <label>Product Category:</label>
        <input formControlName="product_category" type="text">
        <br>
        <label>Supplier Lead Time:</label>
        <input formControlName="supplier_lead_time" type="number">
        <br>
        <button type="submit">Predict</button>
      </form>
      <p>Prediction: {{ prediction }}</p>
    </div>
  `
})
export class AppComponent implements OnInit {
  form: any;
  prediction: any;

  constructor(private http: HttpClient) { }

  ngOnInit(): void {
  }

  onSubmit(): void {
    this.http.post('http://localhost:8000/predict', this.form.value).subscribe((response: any) => {
      this.prediction = response.prediction;
    });
  }
}
```

```python
# data.csv
date,season,product_category,supplier_lead_time,demand_quantity
2022-01-01,winter,electronic,10,100
2022-01-02,winter,electronic,10,120
2022-01-03,winter,electronic,10,110
2022-02-01,spring,electronic,15,150
2022-02-02,spring,electronic,15,160
2022-02-03,spring,electronic,15,140
```