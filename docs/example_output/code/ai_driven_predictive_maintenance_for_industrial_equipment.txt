```java
import weka.classifiers.Evaluation;
import weka.classifiers.trees.J48;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.FastVector;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;

public class PredictiveMaintenanceModel {
    public static void main(String[] args) throws Exception {
        // Load historical dataset
        DataSource source = new DataSource("historical_data.arff");
        Instances data = source.getDataSet();
        
        // Set class index to the last attribute
        data.setClassIndex(data.numAttributes() - 1);
        
        // Remove irrelevant attributes
        Remove remove = new Remove();
        remove.setAttributeIndices("1-3"); // Remove attributes 1-3
        remove.setInputFormat(data);
        Instances filteredData = Filter.useFilter(data, remove);
        
        // Split data into training and testing sets
        int trainSize = (int) Math.round(filteredData.numInstances() * 0.8);
        int testSize = filteredData.numInstances() - trainSize;
        Instances train = new Instances(filteredData, 0, trainSize);
        Instances test = new Instances(filteredData, trainSize, testSize);
        
        // Train a decision tree model
        J48 tree = new J48();
        tree.buildClassifier(train);
        
        // Evaluate the model
        Evaluation eval = new Evaluation(train);
        eval.evaluateModel(tree, test);
        
        // Print evaluation metrics
        System.out.println(eval.toSummaryString());
        
        // Use the model for inference
        DenseInstance instance = new DenseInstance(filteredData.numAttributes());
        instance.setValue(0, 10.0); // Sensor reading 1
        instance.setValue(1, 20.0); // Sensor reading 2
        instance.setValue(2, 30.0); // Sensor reading 3
        instance.setClassMissing();
        double prediction = tree.classifyInstance(instance);
        System.out.println("Predicted maintenance schedule: " + prediction);
    }
}
```