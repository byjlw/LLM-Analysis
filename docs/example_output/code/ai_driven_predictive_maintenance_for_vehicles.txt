```python
# data_preprocessing.py
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler

def load_data(file_path):
    """Load data from CSV file"""
    return pd.read_csv(file_path)

def handle_missing_values(data):
    """Replace missing values with mean of respective column"""
    return data.fillna(data.mean())

def normalize_data(data):
    """Normalize data using Min-Max Scaler"""
    scaler = MinMaxScaler()
    return pd.DataFrame(scaler.fit_transform(data), columns=data.columns)

def transform_data(data):
    """Transform data into suitable format for model training"""
    return data.astype(np.float32)

def preprocess_data(file_path):
    """Preprocess data"""
    data = load_data(file_path)
    data = handle_missing_values(data)
    data = normalize_data(data)
    data = transform_data(data)
    return data

# Example usage:
file_path = 'data.csv'
preprocessed_data = preprocess_data(file_path)
print(preprocessed_data.head())
```

```python
# model_training.py
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

def train_model(data):
    """Train a random forest classifier model"""
    X = data.drop('target', axis=1)
    y = data['target']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("Model Accuracy:", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    return model

def save_model(model, file_path):
    """Save the trained model to a file"""
    import pickle
    with open(file_path, 'wb') as f:
        pickle.dump(model, f)

# Example usage:
file_path = 'data.csv'
data = pd.read_csv(file_path)
model = train_model(data)
save_model(model, 'trained_model.pkl')
```

```python
# model_inference.py
import pandas as pd
import pickle

def load_model(file_path):
    """Load the trained model from a file"""
    with open(file_path, 'rb') as f:
        return pickle.load(f)

def make_prediction(model, data):
    """Make a prediction using the trained model"""
    return model.predict(data)

def inference(data, model_file_path):
    """Make a prediction on new data"""
    model = load_model(model_file_path)
    prediction = make_prediction(model, data)
    return prediction

# Example usage:
data = pd.DataFrame({'temperature': [25], 'vibration': [5], 'pressure': [100]})
model_file_path = 'trained_model.pkl'
prediction = inference(data, model_file_path)
print("Prediction:", prediction)
```

```python
# tests.py
import unittest
from data_preprocessing import preprocess_data
from model_training import train_model
from model_inference import inference

class TestDataPreprocessing(unittest.TestCase):
    def test_handle_missing_values(self):
        data = pd.DataFrame({'A': [1, 2, np.nan, 4]})
        preprocessed_data = preprocess_data('data.csv')
        self.assertFalse(preprocessed_data.isnull().values.any())

    def test_normalize_data(self):
        data = pd.DataFrame({'A': [1, 2, 3, 4]})
        preprocessed_data = preprocess_data('data.csv')
        self.assertLessEqual(preprocessed_data.max().max(), 1)
        self.assertGreaterEqual(preprocessed_data.min().min(), 0)

class TestModelTraining(unittest.TestCase):
    def test_train_model(self):
        data = pd.read_csv('data.csv')
        model = train_model(data)
        self.assertIsNotNone(model)

class TestModelInference(unittest.TestCase):
    def test_inference(self):
        data = pd.DataFrame({'temperature': [25], 'vibration': [5], 'pressure': [100]})
        model_file_path = 'trained_model.pkl'
        prediction = inference(data, model_file_path)
        self.assertIsNotNone(prediction)

if __name__ == '__main__':
    unittest.main()
```

```python
# angular_frontend.py
import http.server
import socketserver

PORT = 8000

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("Serving at port", PORT)
    httpd.serve_forever()
```

```python
# integration.py
import requests
from model_inference import inference

def send_prediction_to_frontend(prediction):
    """Send the prediction to the Angular frontend"""
    url = 'http://localhost:8000/prediction'
    data = {'prediction': prediction}
    response = requests.post(url, json=data)
    return response.status_code

def integrate_with_angular_frontend(data, model_file_path):
    """Integrate the model inference with the Angular frontend"""
    prediction = inference(data, model_file_path)
    status_code = send_prediction_to_frontend(prediction)
    return status_code

# Example usage:
data = pd.DataFrame({'temperature': [25], 'vibration': [5], 'pressure': [100]})
model_file_path = 'trained_model.pkl'
status_code = integrate_with_angular_frontend(data, model_file_path)
print("Status Code:", status_code)
```