```r
# Import necessary libraries
library(RPostgreSQL)
library(dplyr)
library(caret)
library(randomForest)
library(shiny)
library(shinydashboard)

# Data Preparation
# Connect to PostgreSQL database
con <- dbConnect(PostgreSQL(), 
                 dbname = "insurance_claims", 
                 host = "localhost", 
                 port = 5432, 
                 user = "username", 
                 password = "password")

# Collect insurance claims data
claims_data <- dbGetQuery(con, "SELECT * FROM claims")

# Preprocess data
claims_data <- claims_data %>%
  mutate(
    claim_amount = as.numeric(claim_amount),
    claim_frequency = as.numeric(claim_frequency)
  )

# Feature engineering
claims_data$claim_ratio <- claims_data$claim_amount / claims_data$claim_frequency

# Model Selection and Training
# Split data into training and testing sets
set.seed(123)
train_index <- createDataPartition(claims_data$claim_amount, p = 0.8, list = FALSE)
train_data <- claims_data[train_index, ]
test_data <- claims_data[-train_index, ]

# Train a random forest model
model <- randomForest(claim_amount ~., data = train_data, 
                       ntree = 100, importance = TRUE)

# Model Evaluation and Hyperparameter Tuning
# Evaluate model performance
predictions <- predict(model, test_data)
confusion_matrix <- table(test_data$claim_amount, predictions)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Model accuracy:", round(accuracy, 2)))

# Perform hyperparameter tuning
tune_grid <- expand.grid(ntree = c(50, 100, 200), mtry = c(3, 5, 7))
tuned_model <- train(claim_amount ~., data = train_data, 
                     method = "rf", tuneGrid = tune_grid)
print(tuned_model)

# Inference and Deployment
# Create a Shiny API to serve the trained model
ui <- dashboardPage(
  dashboardHeader(title = "Insurance Risk Assessment"),
  dashboardSidebar(
    sidebarMenu(
      menuItem("Predict Claim Amount", tabName = "predict")
    )
  ),
  dashboardBody(
    tabItems(
      tabItem(tabName = "predict",
              fluidPage(
                fluidRow(
                  column(4, textInput("claim_frequency", "Claim Frequency")),
                  column(4, textInput("claim_amount", "Claim Amount")),
                  column(4, actionButton("predict_button", "Predict"))
                ),
                fluidRow(
                  column(12, textOutput("prediction"))
                )
              )
      )
    )
  )
)

server <- function(input, output) {
  prediction <- eventReactive(input$predict_button, {
    new_data <- data.frame(claim_frequency = as.numeric(input$claim_frequency), 
                           claim_amount = as.numeric(input$claim_amount))
    new_data$claim_ratio <- new_data$claim_amount / new_data$claim_frequency
    predict(tuned_model, new_data)
  })
  
  output$prediction <- renderText({
    paste("Predicted claim amount:", round(prediction(), 2))
  })
}

shinyApp(ui = ui, server = server)
```

```sql
-- Create a table to store insurance claims data
CREATE TABLE claims (
  id SERIAL PRIMARY KEY,
  claim_frequency NUMERIC,
  claim_amount NUMERIC
);

-- Insert sample data into the table
INSERT INTO claims (claim_frequency, claim_amount)
VALUES (10, 1000),
       (20, 2000),
       (30, 3000),
       (40, 4000),
       (50, 5000);
```

```r
# Load necessary libraries for Tableau integration
library(httr)
library(jsonlite)

# Set up Tableau API credentials
tableau_server <- "https://your-tableau-server.com"
tableau_username <- "your-username"
tableau_password <- "your-password"

# Authenticate with Tableau API
auth_response <- POST(paste0(tableau_server, "/api/3.11/auth/signin"), 
                      body = list(credentials = list(name = tableau_username, password = tableau_password)),
                      encode = "json")

# Get authentication token
auth_token <- fromJSON(content(auth_response, "text"))$credentials$token

# Publish data to Tableau
publish_response <- POST(paste0(tableau_server, "/api/3.11/sites/your-site-id/workbooks"), 
                         body = list(workbook = list(name = "Insurance Claims", showTabs = TRUE)),
                         headers = c(`X-Tableau-Auth` = auth_token),
                         encode = "json")

# Get workbook ID
workbook_id <- fromJSON(content(publish_response, "text"))$workbook$id

# Publish data source to Tableau
publish_data_source_response <- POST(paste0(tableau_server, "/api/3.11/sites/your-site-id/data-sources"), 
                                     body = list(dataSource = list(name = "Insurance Claims Data", 
                                                                   hasExtracts = TRUE, 
                                                                   dataSourceType = "csv")),
                                     headers = c(`X-Tableau-Auth` = auth_token),
                                     encode = "json")

# Get data source ID
data_source_id <- fromJSON(content(publish_data_source_response, "text"))$dataSource$id

# Upload data to Tableau
upload_response <- PUT(paste0(tableau_server, "/api/3.11/sites/your-site-id/data-sources/", data_source_id, "/connections"), 
                      body = list(connection = list(server = "your-postgresql-server", 
                                                     database = "your-database", 
                                                     username = "your-username", 
                                                     password = "your-password")),
                      headers = c(`X-Tableau-Auth` = auth_token),
                      encode = "json")
```