### Data Preprocessing
```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

def preprocess_data(data):
    # Handle missing values
    data.fillna(data.mean(), inplace=True)
    
    # Normalize data
    scaler = StandardScaler()
    data[['calories', 'protein', 'fat', 'carbohydrates']] = scaler.fit_transform(data[['calories', 'protein', 'fat', 'carbohydrates']])
    
    # Split data into training and testing sets
    X = data.drop('target', axis=1)
    y = data['target']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    return X_train, X_test, y_train, y_test

# Example usage
data = pd.read_csv('user_data.csv')
X_train, X_test, y_train, y_test = preprocess_data(data)
```

### Model Training
```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score

def train_model(X_train, y_train):
    # Choose a suitable algorithm (e.g., collaborative filtering, content-based filtering)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    
    # Train the model using the training data
    model.fit(X_train, y_train)
    
    # Evaluate model performance using metrics such as accuracy and F1-score
    y_pred = model.predict(X_train)
    accuracy = accuracy_score(y_train, y_pred)
    f1 = f1_score(y_train, y_pred, average='macro')
    print(f'Accuracy: {accuracy:.3f}, F1-score: {f1:.3f}')
    
    return model

# Example usage
model = train_model(X_train, y_train)
```

### Model Inference
```python
def generate_nutrition_plan(model, user_input):
    # Implement a function to take in user input and generate a nutrition plan
    user_data = pd.DataFrame([user_input])
    prediction = model.predict(user_data)
    
    # Return the predicted nutrition plan
    return prediction

# Example usage
user_input = {'calories': 2000, 'protein': 100, 'fat': 50, 'carbohydrates': 200}
nutrition_plan = generate_nutrition_plan(model, user_input)
print(nutrition_plan)
```

### Integration with Backend
```python
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:password@host:port/dbname'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), nullable=False, unique=True)

class NutritionPlan(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    plan = db.Column(db.String(1000), nullable=False)

@app.route('/generate_nutrition_plan', methods=['POST'])
def generate_nutrition_plan():
    user_input = request.get_json()
    nutrition_plan = generate_nutrition_plan(model, user_input)
    return jsonify({'nutrition_plan': nutrition_plan})

if __name__ == '__main__':
    app.run(debug=True)
```

### Angular Frontend
```typescript
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-nutrition-plan',
  template: `
    <div>
      <h1>Nutrition Plan</h1>
      <p>{{ nutritionPlan }}</p>
    </div>
  `
})
export class NutritionPlanComponent implements OnInit {
  nutritionPlan: string;

  constructor(private http: HttpClient) { }

  ngOnInit(): void {
    this.http.post('http://localhost:5000/generate_nutrition_plan', {
      calories: 2000,
      protein: 100,
      fat: 50,
      carbohydrates: 200
    }).subscribe(response => {
      this.nutritionPlan = response['nutrition_plan'];
    });
  }
}
```