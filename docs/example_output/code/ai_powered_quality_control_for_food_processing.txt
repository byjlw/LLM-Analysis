```cpp
// data_preprocessing_module.cpp
#include <iostream>
#include <vector>
#include <opencv2/opencv.hpp>

class DataPreprocessingModule {
public:
    std::vector<cv::Mat> preprocessImages(const std::vector<cv::Mat>& images) {
        std::vector<cv::Mat> preprocessedImages;
        for (const auto& image : images) {
            cv::Mat resizedImage;
            cv::resize(image, resizedImage, cv::Size(256, 256));
            preprocessedImages.push_back(resizedImage);
        }
        return preprocessedImages;
    }

    std::vector<std::vector<float>> preprocessSensorData(const std::vector<std::vector<float>>& sensorData) {
        std::vector<std::vector<float>> preprocessedSensorData;
        for (const auto& data : sensorData) {
            std::vector<float> normalizedData;
            for (float value : data) {
                normalizedData.push_back((value - 0.0) / (100.0 - 0.0));
            }
            preprocessedSensorData.push_back(normalizedData);
        }
        return preprocessedSensorData;
    }
};

// machine_learning_model.cpp
#include <iostream>
#include <vector>
#include <opencv2/opencv.hpp>
#include <dlib/dnn.h>

using namespace dlib;

class MachineLearningModel {
public:
    void train(const std::vector<cv::Mat>& images, const std::vector<int>& labels) {
        // Create a CNN model using dlib
        net_type net;
        net = layer<convo>(10, 10, 1, 20, 1, 1, 1, 1, 1);
        net = layer<relu>(net);
        net = layer<max_pool>(2, 2, 1, 1, 1);
        net = layer<fc>(128, 10);
        net = layer<softmax>(net);

        // Train the model
        dnn_trainer<net_type> trainer(net, 0.01, 0.9, 0.00001);
        for (int i = 0; i < 100; i++) {
            trainer.train_one_step(images, labels);
        }
    }

    int predict(const cv::Mat& image) {
        // Create a CNN model using dlib
        net_type net;
        net = layer<convo>(10, 10, 1, 20, 1, 1, 1, 1, 1);
        net = layer<relu>(net);
        net = layer<max_pool>(2, 2, 1, 1, 1);
        net = layer<fc>(128, 10);
        net = layer<softmax>(net);

        // Make a prediction
        matrix<float> output = net(image);
        return argmax(output);
    }
};

// inference_engine.cpp
#include <iostream>
#include <vector>
#include <opencv2/opencv.hpp>

class InferenceEngine {
public:
    void deployModel(const MachineLearningModel& model) {
        // Deploy the model on the food processing device
        //...
    }

    int analyzeImage(const cv::Mat& image, const MachineLearningModel& model) {
        // Analyze the image using the deployed model
        return model.predict(image);
    }
};

// tests.cpp
#include <iostream>
#include <vector>
#include <opencv2/opencv.hpp>
#include <gtest/gtest.h>

TEST(DataPreprocessingModuleTest, PreprocessImages) {
    DataPreprocessingModule module;
    std::vector<cv::Mat> images;
    //...
    std::vector<cv::Mat> preprocessedImages = module.preprocessImages(images);
    //...
}

TEST(MachineLearningModelTest, Train) {
    MachineLearningModel model;
    std::vector<cv::Mat> images;
    std::vector<int> labels;
    //...
    model.train(images, labels);
    //...
}

TEST(InferenceEngineTest, DeployModel) {
    InferenceEngine engine;
    MachineLearningModel model;
    //...
    engine.deployModel(model);
    //...
}

TEST(InferenceEngineTest, AnalyzeImage) {
    InferenceEngine engine;
    MachineLearningModel model;
    cv::Mat image;
    //...
    int prediction = engine.analyzeImage(image, model);
    //...
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
```

```cpp
// CMakeLists.txt
cmake_minimum_required(VERSION 3.10)
project(FoodQualityControl)

find_package(OpenCV REQUIRED)
find_package(dlib REQUIRED)
find_package(GTest REQUIRED)

add_executable(data_preprocessing_module data_preprocessing_module.cpp)
target_link_libraries(data_preprocessing_module ${OpenCV_LIBS})

add_executable(machine_learning_model machine_learning_model.cpp)
target_link_libraries(machine_learning_model ${dlib_LIBRARIES})

add_executable(inference_engine inference_engine.cpp)
target_link_libraries(inference_engine ${OpenCV_LIBS})

add_executable(tests tests.cpp)
target_link_libraries(tests ${OpenCV_LIBS} ${dlib_LIBRARIES} ${GTEST_LIBRARIES})

enable_testing()
add_test(NAME FoodQualityControlTests COMMAND tests)
```

```bash
# build and run tests
mkdir build
cd build
cmake..
cmake --build.
./tests
```