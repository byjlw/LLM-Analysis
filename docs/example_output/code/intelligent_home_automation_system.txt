```javascript
// Import required libraries
const mongoose = require('mongoose');
const TensorFlow = require('@tensorflow/tfjs-node');

// Connect to MongoDB database
mongoose.connect('mongodb://localhost/energy_efficiency', { useNewUrlParser: true, useUnifiedTopology: true });

// Define the data model for IoT sensor data
const sensorDataSchema = new mongoose.Schema({
  temperature: Number,
  humidity: Number,
  lighting: Number,
  occupancy: Number,
  energyConsumption: Number
});
const SensorData = mongoose.model('SensorData', sensorDataSchema);

// Data Ingestion component
async function ingestData(sensorData) {
  const data = new SensorData(sensorData);
  await data.save();
}

// Data Processing component
async function processData() {
  const data = await SensorData.find().exec();
  const inputData = data.map(d => [d.temperature, d.humidity, d.lighting, d.occupancy]);
  const outputData = data.map(d => d.energyConsumption);
  return { inputData, outputData };
}

// Model Training component
async function trainModel(inputData, outputData) {
  // Create a linear regression model
  const model = TensorFlow.sequential();
  model.add(TensorFlow.layers.dense({ units: 1, inputShape: [4] }));
  model.compile({ optimizer: 'adam', loss: 'meanSquaredError' });

  // Train the model
  await model.fit(TensorFlow.tensor2d(inputData), TensorFlow.tensor1d(outputData), {
    epochs: 100,
    batchSize: 32,
    callbacks: {
      onEpochEnd: async (epoch, logs) => {
        console.log(`Epoch ${epoch + 1}: Loss = ${logs.loss}`);
      }
    }
  });

  return model;
}

// Model Inference component
async function predictEnergyConsumption(model, sensorData) {
  const inputData = [sensorData.temperature, sensorData.humidity, sensorData.lighting, sensorData.occupancy];
  const output = model.predict(TensorFlow.tensor2d([inputData]));
  const energyConsumption = output.dataSync()[0];
  return energyConsumption;
}

// Testing component
async function testModel(model) {
  // Generate simulated IoT sensor data
  const testData = [];
  for (let i = 0; i < 100; i++) {
    testData.push({
      temperature: Math.random() * 30,
      humidity: Math.random() * 100,
      lighting: Math.random() * 100,
      occupancy: Math.random() * 10
    });
  }

  // Evaluate the model using Mean Absolute Error (MAE) and Mean Squared Error (MSE)
  let mae = 0;
  let mse = 0;
  for (const data of testData) {
    const predictedEnergyConsumption = await predictEnergyConsumption(model, data);
    const actualEnergyConsumption = data.temperature * 0.1 + data.humidity * 0.2 + data.lighting * 0.3 + data.occupancy * 0.4;
    mae += Math.abs(predictedEnergyConsumption - actualEnergyConsumption);
    mse += Math.pow(predictedEnergyConsumption - actualEnergyConsumption, 2);
  }
  mae /= testData.length;
  mse /= testData.length;
  console.log(`MAE: ${mae}, MSE: ${mse}`);
}

// Main function
async function main() {
  // Ingest data
  const sensorData = {
    temperature: 25,
    humidity: 60,
    lighting: 80,
    occupancy: 5,
    energyConsumption: 100
  };
  await ingestData(sensorData);

  // Process data
  const { inputData, outputData } = await processData();

  // Train model
  const model = await trainModel(inputData, outputData);

  // Test model
  await testModel(model);

  // Use the model to predict energy consumption
  const predictedEnergyConsumption = await predictEnergyConsumption(model, sensorData);
  console.log(`Predicted energy consumption: ${predictedEnergyConsumption}`);
}

main();
```