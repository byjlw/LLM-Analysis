```python
# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
import pickle
import os

# Load data from PostgreSQL database
def load_data():
    import psycopg2
    conn = psycopg2.connect(
        host="localhost",
        database="database_name",
        user="username",
        password="password"
    )
    cur = conn.cursor()
    cur.execute("SELECT * FROM it_service_requests")
    rows = cur.fetchall()
    data = pd.DataFrame(rows)
    return data

# Preprocess data
def preprocess_data(data):
    le = LabelEncoder()
    data['category'] = le.fit_transform(data['category'])
    X = data.drop(['category'], axis=1)
    y = data['category']
    return X, y

# Train model
def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print("Model Accuracy:", accuracy_score(y_test, y_pred))
    return model

# Create API for AI/ML component
def predict_category(input_data):
    model = pickle.load(open('model.pkl', 'rb'))
    prediction = model.predict(input_data)
    return prediction

# Save model to file
def save_model(model):
    pickle.dump(model, open('model.pkl', 'wb'))

# Load model from file
def load_model():
    return pickle.load(open('model.pkl', 'rb'))

# Django view to handle requests
@require_http_methods(["POST"])
def predict_category_view(request):
    input_data = pd.DataFrame(request.POST)
    prediction = predict_category(input_data)
    return JsonResponse({'prediction': prediction.tolist()})

# Test the AI/ML component
def test_ai_ml_component():
    data = load_data()
    X, y = preprocess_data(data)
    model = train_model(X, y)
    save_model(model)
    loaded_model = load_model()
    input_data = pd.DataFrame([[1, 2, 3]])  # Replace with actual input data
    prediction = loaded_model.predict(input_data)
    print("Prediction:", prediction)

# Run the test
if __name__ == "__main__":
    test_ai_ml_component()
```

```python
# tests.py
import unittest
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import pickle
import os

class TestAIMLComponent(unittest.TestCase):
    def test_load_data(self):
        data = pd.DataFrame({
            'id': [1, 2, 3],
            'category': ['hardware', 'software', 'network']
        })
        self.assertEqual(len(data), 3)

    def test_preprocess_data(self):
        data = pd.DataFrame({
            'id': [1, 2, 3],
            'category': ['hardware', 'software', 'network']
        })
        X, y = preprocess_data(data)
        self.assertEqual(len(X), 3)
        self.assertEqual(len(y), 3)

    def test_train_model(self):
        data = pd.DataFrame({
            'id': [1, 2, 3],
            'category': ['hardware', 'software', 'network']
        })
        X, y = preprocess_data(data)
        model = train_model(X, y)
        self.assertIsInstance(model, RandomForestClassifier)

    def test_predict_category(self):
        model = pickle.load(open('model.pkl', 'rb'))
        input_data = pd.DataFrame([[1, 2, 3]])  # Replace with actual input data
        prediction = model.predict(input_data)
        self.assertIsNotNone(prediction)

    def test_save_model(self):
        model = RandomForestClassifier(n_estimators=100)
        save_model(model)
        self.assertTrue(os.path.exists('model.pkl'))

    def test_load_model(self):
        model = load_model()
        self.assertIsInstance(model, RandomForestClassifier)

if __name__ == "__main__":
    unittest.main()
```