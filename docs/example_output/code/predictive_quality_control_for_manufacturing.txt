```java
// DataPreprocessing.java
import org.deeplearning4j.datasets.iterator.impl.ListDataSetIterator;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.dataset.api.DataSetUtil;
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nadam;
import org.nd4j.linalg.lossfunctions.LossFunctions;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class DataPreprocessing {

    public INDArray normalizeData(INDArray data) {
        // Min-Max Scaler
        double min = data.minNumber().doubleValue();
        double max = data.maxNumber().doubleValue();
        return data.subi(min).divi(max - min);
    }

    public INDArray handleMissingValues(INDArray data) {
        // Replace missing values with mean
        INDArray mean = data.mean(0);
        for (int i = 0; i < data.rows(); i++) {
            for (int j = 0; j < data.columns(); j++) {
                if (Double.isNaN(data.getDouble(i, j))) {
                    data.putScalar(i, j, mean.getDouble(j));
                }
            }
        }
        return data;
    }

    public INDArray handleOutliers(INDArray data) {
        // Remove outliers using IQR method
        INDArray sortedData = data.sort(0);
        double q1 = sortedData.getDouble((int) (0.25 * data.rows()), 0);
        double q3 = sortedData.getDouble((int) (0.75 * data.rows()), 0);
        double iqr = q3 - q1;
        for (int i = 0; i < data.rows(); i++) {
            for (int j = 0; j < data.columns(); j++) {
                if (data.getDouble(i, j) < q1 - 1.5 * iqr || data.getDouble(i, j) > q3 + 1.5 * iqr) {
                    data.putScalar(i, j, q1);
                }
            }
        }
        return data;
    }
}
```

```java
// ModelTraining.java
import org.deeplearning4j.datasets.iterator.impl.ListDataSetIterator;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.layers.DenseLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.dataset.DataSet;
import org.nd4j.linalg.dataset.api.DataSetUtil;
import org.nd4j.linalg.dataset.api.iterator.DataSetIterator;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.linalg.learning.config.Nadam;
import org.nd4j.linalg.lossfunctions.LossFunctions;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class ModelTraining {

    public MultiLayerNetwork trainModel(INDArray data, INDArray labels) {
        // Split data into training and testing sets
        int split = (int) (0.8 * data.rows());
        INDArray trainingData = data.getRows(0, split);
        INDArray testingData = data.getRows(split, data.rows());
        INDArray trainingLabels = labels.getRows(0, split);
        INDArray testingLabels = labels.getRows(split, labels.rows());

        // Configure neural network
        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()
                .seed(123)
                .weightInit(WeightInit.XAVIER)
                .updater(new Nadam())
                .list()
                .layer(new DenseLayer.Builder()
                        .nIn(data.columns())
                        .nOut(10)
                        .activation(Activation.RELU)
                        .build())
                .layer(new OutputLayer.Builder()
                        .nIn(10)
                        .nOut(labels.columns())
                        .activation(Activation.SOFTMAX)
                        .lossFunction(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)
                        .build())
                .pretrain(false).backprop(true).build();

        MultiLayerNetwork model = new MultiLayerNetwork(conf);
        model.init();

        // Train model
        DataSetIterator iterator = new ListDataSetIterator(createDataSets(trainingData, trainingLabels), 10);
        model.fit(iterator);

        return model;
    }

    private List<DataSet> createDataSets(INDArray data, INDArray labels) {
        List<DataSet> dataSets = new ArrayList<>();
        for (int i = 0; i < data.rows(); i++) {
            dataSets.add(new DataSet(data.getRow(i), labels.getRow(i)));
        }
        return dataSets;
    }
}
```

```java
// ModelInference.java
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.springframework.stereotype.Service;

@Service
public class ModelInference {

    public INDArray predict(MultiLayerNetwork model, INDArray data) {
        return model.output(data);
    }
}
```

```java
// LocalInference.java
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.springframework.stereotype.Service;

@Service
public class LocalInference {

    public INDArray predictLocally(MultiLayerNetwork model, INDArray data) {
        // Load model into memory
        model.init();

        // Use model to make predictions
        return model.output(data);
    }
}
```

```java
// QualityControlSystem.java
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class QualityControlSystem {

    private final DataPreprocessing dataPreprocessing;
    private final ModelTraining modelTraining;
    private final ModelInference modelInference;
    private final LocalInference localInference;

    @Autowired
    public QualityControlSystem(DataPreprocessing dataPreprocessing, ModelTraining modelTraining, ModelInference modelInference, LocalInference localInference) {
        this.dataPreprocessing = dataPreprocessing;
        this.modelTraining = modelTraining;
        this.modelInference = modelInference;
        this.localInference = localInference;
    }

    public INDArray predictQuality(INDArray data) {
        // Preprocess data
        INDArray normalizedData = dataPreprocessing.normalizeData(data);
        INDArray handledData = dataPreprocessing.handleMissingValues(normalizedData);
        INDArray outlierHandledData = dataPreprocessing.handleOutliers(handledData);

        // Train model
        MultiLayerNetwork model = modelTraining.trainModel(outlierHandledData, null);

        // Make predictions
        INDArray predictions = modelInference.predict(model, outlierHandledData);

        // Make local predictions
        INDArray localPredictions = localInference.predictLocally(model, outlierHandledData);

        return predictions;
    }
}
```

```java
// QualityControlSystemTest.java
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import static org.junit.Assert.assertEquals;

@RunWith(SpringRunner.class)
@SpringBootTest
public class QualityControlSystemTest {

    @Autowired
    private QualityControlSystem qualityControlSystem;

    @Test
    public void testPredictQuality() {
        // Generate random data
        INDArray data = Nd4j.rand(100, 10);

        // Make predictions
        INDArray predictions = qualityControlSystem.predictQuality(data);

        // Verify predictions
        assertEquals(100, predictions.rows());
        assertEquals(1, predictions.columns());
    }
}
```