```cpp
// SmartBuildingAutomationSystem.cpp
#include <Arduino.h>
#include <WiFi.h>
#include <TensorFlowLite.h>

// TensorFlow Lite model
const char* model_path = "smart_building_model.tflite";

// Sensor readings
float temperature;
float humidity;
float energy_consumption;

// Optimization recommendations
float lighting_level;
float hvac_setting;

// TensorFlow Lite interpreter
tflite::Interpreter* interpreter;

// TensorFlow Lite tensor allocation
TfLiteTensor* input_tensor;
TfLiteTensor* output_tensor;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Initialize WiFi connection
  WiFi.begin("ssid", "password");
  while (WiFi.status()!= WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  // Initialize TensorFlow Lite interpreter
  interpreter = new tflite::Interpreter(model_path);
  interpreter->AllocateTensors();

  // Get input and output tensors
  input_tensor = interpreter->input_tensor(0);
  output_tensor = interpreter->output_tensor(0);
}

void loop() {
  // Collect sensor readings
  temperature = readTemperatureSensor();
  humidity = readHumiditySensor();
  energy_consumption = readEnergyConsumptionSensor();

  // Preprocess sensor readings
  float input_data[3] = {temperature, humidity, energy_consumption};
  input_tensor->data.raw = input_data;

  // Run inference engine
  interpreter->Invoke();

  // Get optimization recommendations
  float output_data[2];
  memcpy(output_data, output_tensor->data.raw, sizeof(float) * 2);
  lighting_level = output_data[0];
  hvac_setting = output_data[1];

  // Output optimization recommendations
  Serial.print("Lighting level: ");
  Serial.println(lighting_level);
  Serial.print("HVAC setting: ");
  Serial.println(hvac_setting);

  delay(1000);
}

// Read temperature sensor
float readTemperatureSensor() {
  // Simulate temperature sensor reading
  return 20.0;
}

// Read humidity sensor
float readHumiditySensor() {
  // Simulate humidity sensor reading
  return 60.0;
}

// Read energy consumption sensor
float readEnergyConsumptionSensor() {
  // Simulate energy consumption sensor reading
  return 100.0;
}
```

```cpp
// TensorFlowLiteModel.cpp
#include <TensorFlowLite.h>

// Define TensorFlow Lite model architecture
const int num_inputs = 3;
const int num_outputs = 2;
const int num_hidden_layers = 2;
const int num_hidden_units = 10;

// Define TensorFlow Lite model weights and biases
float model_weights[num_inputs * num_hidden_units];
float model_biases[num_hidden_units];
float hidden_weights[num_hidden_units * num_hidden_units];
float hidden_biases[num_hidden_units];
float output_weights[num_hidden_units * num_outputs];
float output_biases[num_outputs];

// Initialize TensorFlow Lite model
void initModel() {
  // Initialize model weights and biases
  for (int i = 0; i < num_inputs * num_hidden_units; i++) {
    model_weights[i] = 0.1;
  }
  for (int i = 0; i < num_hidden_units; i++) {
    model_biases[i] = 0.1;
  }
  for (int i = 0; i < num_hidden_units * num_hidden_units; i++) {
    hidden_weights[i] = 0.1;
  }
  for (int i = 0; i < num_hidden_units; i++) {
    hidden_biases[i] = 0.1;
  }
  for (int i = 0; i < num_hidden_units * num_outputs; i++) {
    output_weights[i] = 0.1;
  }
  for (int i = 0; i < num_outputs; i++) {
    output_biases[i] = 0.1;
  }
}

// Define TensorFlow Lite model inference function
void inference(float* input_data, float* output_data) {
  // Compute hidden layer activations
  float hidden_activations[num_hidden_units];
  for (int i = 0; i < num_hidden_units; i++) {
    float sum = 0.0;
    for (int j = 0; j < num_inputs; j++) {
      sum += input_data[j] * model_weights[j * num_hidden_units + i];
    }
    sum += model_biases[i];
    hidden_activations[i] = sigmoid(sum);
  }

  // Compute output layer activations
  for (int i = 0; i < num_outputs; i++) {
    float sum = 0.0;
    for (int j = 0; j < num_hidden_units; j++) {
      sum += hidden_activations[j] * output_weights[j * num_outputs + i];
    }
    sum += output_biases[i];
    output_data[i] = sigmoid(sum);
  }
}

// Define sigmoid activation function
float sigmoid(float x) {
  return 1.0 / (1.0 + exp(-x));
}
```

```cpp
// test_TensorFlowLiteModel.cpp
#include <TensorFlowLite.h>
#include <gtest/gtest.h>

TEST(TensorFlowLiteModelTest, InferenceTest) {
  // Initialize TensorFlow Lite model
  initModel();

  // Define input data
  float input_data[3] = {20.0, 60.0, 100.0};

  // Define output data
  float output_data[2];

  // Run inference engine
  inference(input_data, output_data);

  // Check output values
  EXPECT_NEAR(output_data[0], 0.5, 0.1);
  EXPECT_NEAR(output_data[1], 0.5, 0.1);
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
```