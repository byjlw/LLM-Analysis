```cpp
// data_preprocessing.cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <mysql/mysql.h>

// Function to connect to MySQL database
MYSQL* connectToDatabase(const std::string& host, const std::string& user, const std::string& password, const std::string& database) {
    MYSQL* conn = mysql_init(0);
    if (!mysql_real_connect(conn, host.c_str(), user.c_str(), password.c_str(), database.c_str(), 0, NULL, 0)) {
        std::cerr << "Error connecting to database: " << mysql_error(conn) << std::endl;
        mysql_close(conn);
        return NULL;
    }
    return conn;
}

// Function to collect and clean data from IoT sensors
void collectAndCleanData(MYSQL* conn) {
    std::ifstream sensorData("sensor_data.csv");
    if (!sensorData.is_open()) {
        std::cerr << "Error opening sensor data file" << std::endl;
        return;
    }

    std::string line, column;
    while (std::getline(sensorData, line)) {
        std::istringstream iss(line);
        std::vector<std::string> columns;
        while (std::getline(iss, column, ',')) {
            columns.push_back(column);
        }

        // Clean and preprocess data
        if (columns.size()!= 5) {
            std::cerr << "Invalid data format" << std::endl;
            continue;
        }

        // Insert data into MySQL database
        std::string query = "INSERT INTO waste_data (waste_level, composition, location, timestamp, sensor_id) VALUES ('";
        query += columns[0] + "', '" + columns[1] + "', '" + columns[2] + "', '" + columns[3] + "', '" + columns[4] + "')";
        if (mysql_query(conn, query.c_str())) {
            std::cerr << "Error inserting data into database: " << mysql_error(conn) << std::endl;
        }
    }

    sensorData.close();
    mysql_close(conn);
}

int main() {
    // Connect to MySQL database
    MYSQL* conn = connectToDatabase("localhost", "username", "password", "waste_management");
    if (conn == NULL) {
        return 1;
    }

    // Collect and clean data from IoT sensors
    collectAndCleanData(conn);

    return 0;
}
```

```cpp
// machine_learning_model.cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <tensorflow/cc/saved_model/loader.h>
#include <tensorflow/cc/saved_model/tag_constants.h>

// Function to train a machine learning model using historical data
void trainModel() {
    // Load historical data from MySQL database
    MYSQL* conn = mysql_init(0);
    if (!mysql_real_connect(conn, "localhost", "username", "password", "waste_management", 0, NULL, 0)) {
        std::cerr << "Error connecting to database: " << mysql_error(conn) << std::endl;
        mysql_close(conn);
        return;
    }

    std::string query = "SELECT * FROM waste_data";
    if (mysql_query(conn, query.c_str())) {
        std::cerr << "Error executing query: " << mysql_error(conn) << std::endl;
        mysql_close(conn);
        return;
    }

    MYSQL_RES* result = mysql_store_result(conn);
    if (result == NULL) {
        std::cerr << "Error storing result: " << mysql_error(conn) << std::endl;
        mysql_close(conn);
        return;
    }

    // Preprocess data and train model using TensorFlow
    tensorflow::SavedModelBundle bundle;
    tensorflow::Status status = tensorflow::LoadSavedModel("model", {tensorflow::kSavedModelTagServe}, &bundle);
    if (!status.ok()) {
        std::cerr << "Error loading saved model: " << status << std::endl;
        return;
    }

    // Train model using historical data
    //...

    // Save trained model to file
    tensorflow::Status saveStatus = tensorflow::SaveSavedModel(bundle, "model");
    if (!saveStatus.ok()) {
        std::cerr << "Error saving trained model: " << saveStatus << std::endl;
    }
}

int main() {
    // Train machine learning model using historical data
    trainModel();

    return 0;
}
```

```cpp
// model_deployment.cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <tensorflow/cc/saved_model/loader.h>
#include <tensorflow/cc/saved_model/tag_constants.h>

// Function to deploy trained model on waste management devices
void deployModel() {
    // Load trained model from file
    tensorflow::SavedModelBundle bundle;
    tensorflow::Status status = tensorflow::LoadSavedModel("model", {tensorflow::kSavedModelTagServe}, &bundle);
    if (!status.ok()) {
        std::cerr << "Error loading saved model: " << status << std::endl;
        return;
    }

    // Deploy model on waste management devices
    //...

    // Test deployed model
    //...
}

int main() {
    // Deploy trained model on waste management devices
    deployModel();

    return 0;
}
```

```cpp
// inference_engine.cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <tensorflow/cc/saved_model/loader.h>
#include <tensorflow/cc/saved_model/tag_constants.h>

// Function to develop inference engine to run model on new data
void developInferenceEngine() {
    // Load deployed model from file
    tensorflow::SavedModelBundle bundle;
    tensorflow::Status status = tensorflow::LoadSavedModel("model", {tensorflow::kSavedModelTagServe}, &bundle);
    if (!status.ok()) {
        std::cerr << "Error loading saved model: " << status << std::endl;
        return;
    }

    // Develop inference engine to run model on new data
    //...

    // Test inference engine
    //...
}

int main() {
    // Develop inference engine to run model on new data
    developInferenceEngine();

    return 0;
}
```

```cpp
// tests.cpp
#include <gtest/gtest.h>
#include <vector>
#include <string>
#include <tensorflow/cc/saved_model/loader.h>
#include <tensorflow/cc/saved_model/tag_constants.h>

// Test suite for data preprocessing pipeline
TEST(DataPreprocessingTest, CollectAndCleanData) {
    // Test collect and clean data function
    //...
}

// Test suite for machine learning model
TEST(MachineLearningModelTest, TrainModel) {
    // Test train model function
    //...
}

// Test suite for model deployment
TEST(ModelDeploymentTest, DeployModel) {
    // Test deploy model function
    //...
}

// Test suite for inference engine
TEST(InferenceEngineTest, DevelopInferenceEngine) {
    // Test develop inference engine function
    //...
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
```
```cpp
// CMakeLists.txt
cmake_minimum_required(VERSION 3.10)
project(SmartWasteManagement)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(TensorFlow REQUIRED)

add_executable(data_preprocessing data_preprocessing.cpp)
add_executable(machine_learning_model machine_learning_model.cpp)
add_executable(model_deployment model_deployment.cpp)
add_executable(inference_engine inference_engine.cpp)
add_executable(tests tests.cpp)

target_link_libraries(data_preprocessing ${TENSORFLOW_LIBRARIES})
target_link_libraries(machine_learning_model ${TENSORFLOW_LIBRARIES})
target_link_libraries(model_deployment ${TENSORFLOW_LIBRARIES})
target_link_libraries(inference_engine ${TENSORFLOW_LIBRARIES})
target_link_libraries(tests ${TENSORFLOW_LIBRARIES} gtest_main)
```
```bash
# build.sh
#!/bin/bash

cmake.
cmake --build.
```