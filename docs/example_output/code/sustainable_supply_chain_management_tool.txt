**Sustainable Supply Chain Management Tool: AI/ML Component**
===========================================================

In this code example, we'll focus on the AI/ML component of the sustainable supply chain management tool. We'll use Python as the primary language, along with popular libraries such as scikit-learn, TensorFlow, and pandas.

**Task: Predicting Supply Chain Disruptions**
----------------------------------------

We'll train a machine learning model to predict potential supply chain disruptions based on historical data. This will help businesses proactively mitigate risks and reduce their environmental impact.

**Code:**
```python
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import tensorflow as tf
from tensorflow import keras
from sklearn.preprocessing import StandardScaler

# Load historical data
data = pd.read_csv('supply_chain_data.csv')

# Preprocess data
X = data.drop(['disruption'], axis=1)  # features
y = data['disruption']  # target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train a Random Forest Classifier
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = rfc.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)
print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred))
print('Classification Report:\n', classification_report(y_test, y_pred))

# Train a Neural Network using TensorFlow
model = keras.Sequential([
    keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, validation_data=(X_test_scaled, y_test))

# Make predictions using the Neural Network
y_pred_nn = model.predict(X_test_scaled)
y_pred_nn = (y_pred_nn > 0.5).astype('int32')

# Evaluate the Neural Network
accuracy_nn = accuracy_score(y_test, y_pred_nn)
print('Neural Network Accuracy:', accuracy_nn)
```
**Explanation:**

1. We load the historical data from a CSV file using pandas.
2. We preprocess the data by dropping the target variable ('disruption') and scaling the features using StandardScaler.
3. We split the data into training and testing sets using train_test_split.
4. We train a Random Forest Classifier on the training data and make predictions on the test set.
5. We evaluate the Random Forest Classifier using accuracy score, confusion matrix, and classification report.
6. We train a Neural Network using TensorFlow and make predictions on the test set.
7. We evaluate the Neural Network using accuracy score.

**Notes:**

* This is a basic example, and you may need to adjust the preprocessing steps, feature engineering, and hyperparameter tuning to improve the model's performance.
* You can use techniques like cross-validation to evaluate the model's performance on unseen data.
* You can also experiment with other machine learning algorithms and techniques, such as gradient boosting, support vector machines, or ensemble methods.

I hope this helps! Let me know if you have any questions or need further assistance.